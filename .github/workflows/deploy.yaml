name: Build, Test and Deploy

on:
  push:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_USER: kubsu
          POSTGRES_PASSWORD: kubsu
          POSTGRES_DB: kubsu
        ports:
          - "5432:5432"
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and test
      uses: docker/build-push-action@v3
      with:
        context: .
        target: builder
        tags: app-builder:latest

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME_NEW }}/kubsu-app:latest
    - name: Debug SSH connection
      run: |
        echo "Публичная часть ключа:"
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | ssh-keygen -y -f /dev/stdin || echo "Неверный формат ключа"

        echo "Проверка доступа:"
        curl -sSf telnet://${{ secrets.SSH_HOST }}:${{ secrets.SSH_PORT }} -m 5 || \
        echo "Порт недоступен"
    - name: Test SSH connection manually
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem
        ssh -i key.pem \
          -p ${{ secrets.SSH_PORT || 22 }} \
          -o StrictHostKeyChecking=no \
          ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} \
          "echo 'Connected to:'; hostname; echo 'Podman version:'; podman --version"

    - name: Deploy to server
      uses: appleboy/ssh-action@v1
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SSH_PORT }}
        script: |
            podman login -u ${{ vars.DOCKER_HUB_USERNAME }} -p ${{ secrets.DOCKER_HUB_TOKEN }} docker.io

            # Stop and remove existing container if it exists
            podman stop kubsu-app || true
            podman rm kubsu-app || true

            # Remove existing image if it exists
            podman rmi ${{ vars.DOCKER_HUB_USERNAME_NEW }}/kubsu-app:latest || true

            # Pull new image from Docker Hub
            podman pull ${{ vars.DOCKER_HUB_USERNAME_NEW }}/kubsu-app:latest

            # Run new container
            podman run -d --name kubsu-app --network host ${{ vars.DOCKER_HUB_USERNAME_NEW }}/kubsu-app:latest
            echo "Container has been deployed successfully!"
